
use Stone.Source; 

space Stone.Syntax {

	public struct Decl : Node<Decl> {
		private DeclType declType = DeclType.None;
	}
	public Decl::Decl() {
	}
	public Decl::~Decl() {
	}
	public fun Decl::GetType() -> DeclType {
		return declType;
	}

	public struct ValueDecl {
		private Decl* decl = null;
		private DeclName name;
		private Loc nameLoc;

	}
	public ValueDecl::this(DeclName name, Loc nameLoc) {
			this.decl = new Decl();
	}
	public ValueDecl::~this() {
		if(decl){
			free decl; 
		}
	}
	public fun ValueDecl::GetDecl() -> Decl* {
		return decl;
	}

	public struct FunDecl {
		private ValueDecl* vd = null; 
		private Loc funLoc; 
	}
	public FunDecl::this(Loc funLoc, DeclName name, Loc nameLoc) {
			this.funLoc = funLoc; 
			this.name = name; 
			this.nameLoc = nameLoc; 
			this.vd = new ValueDecl(name, nameLoc);
		}
	public FunDecl::~this() {
		if (vd){
			free vd;
		}
	}
	public fun FunDecl::GetValueDecl() -> ValueDecl* {
		return vd; 
	}
}
