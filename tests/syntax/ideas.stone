
space Physics.QM {

	public struct Particle {
		public bool fired = false; 
	}
	public any<T> interface Accelerator {
		fun Fire(const Particle* p) -> bool;
	}
	public struct LinearAccelerator : Accelerator<LinearAccelerator> {
		private Detector* detector = null; 
	}
	public LinearAccelerator::LinearAccelerator() {
		detector = new Detector();
	}
	public LinearAccelerator::~LinearAccelerator() {
		if(detector) {
			free detector;
		}
	}	
	public fun LinearAcellerator::Fire(const Particle* p) -> bool {
		p.fired = true; 
		return true; 
	}

	fun Main() -> i32 {

		auto p = new Particle();
		auto a = new LinearAcceleartor(); 
		a.Fire(a);

		free p; 
		free a;
	}

}


