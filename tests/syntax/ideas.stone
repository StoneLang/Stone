use System; 
use Math; 

module Ideas; 

space Ideas.Testing {

interface CI {
	fun Print() -> void; 
}
class C0 :  CI {
	const Options* options = null; 
	public i32 counter = 0; 
	public System* system = null;  
}

C0::new(Options* options, Context* context) {

	this.options = options;
	this.context = context; 
	this.system = new System(); 
}
C0::defer(){ 
	free system;
	free options; 
}


// Leaning this way
init fun C0::Init(const Options* options, Context* context) {
	me.options = options;
	me.context = context; 
	me.system = new System(); 
}
[test]
defer fun C0::Defer() { 
	free {
		system;
		options;
	}
}



module Physics; 
space Physics.Physics {
	interface Accelerator<T> {
			Fire(const T* particle != null) -> bool;
	}

	struct LinearAccelerator : Accelerator<LinearAccelerator> {
		public string name = "some name";  
	}

	init fun LinearAccelerator::Init() {

	}

	defer fun LinearAccelerator::Defer() {

	}

	struct Particle {
		public bool fired = false; 
	}

	fun LinearAcellerator::Fire(const Particle* particle) -> bool {
		particle.fired = true; 
		return true; 
	}

	fun Main() -> void {

		auto p = new Particle();
		auto a = new LinearAcceleartor(); 
		a.Fire(a);

		free p; 
		free a;

	}
}


// Or


space Physics {

	public interface Particle {
	}
	public struct Electron : Particle {
	}

	any(A) interface Accelerator {
			any(P:Particle) fun Fire(const P* particle) -> bool;
	}
	public struct LinearAccelerator : use(LinearAccelerator) Accelerator {
		public string name = "some name";  
	}
	init public fun LinearAccelerator::Init() {
	}
	defer public fun LinearAccelerator::Defer() {
	}
	public fun LinearAccelerator::Fire(const P* particle) -> bool {
		return true; 
	}

	//OR 
	public interface Particle {
	}

	public struct Electron : Particle {
	}

	any(P) interface Accelerator {
		fun Fire(const P* particle) -> bool;
	}

	public any(P) struct LinearAccelerator : any(P) Accelerator {
		public string name = "some name";  
	}

	init public fun LinearAccelerator::Init() {
	}

	defer public fun LinearAccelerator::Defer() {
	}

	public fun LinearAccelerator::Fire(const P* particle) -> bool {
		return true; 
	}
	
  with(Electron) auto a = new LinearAccelerator();
  auto e = new Electron(); 
  a.Fire(electron);
}
fun Main() -> int {

	use(LinearAccelerator) 
		Accelerator* a = new LinearAccelerator();

	Particle* p = new Electron();
	a.Fire(p); 

	free p; 
}




